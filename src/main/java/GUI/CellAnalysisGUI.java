/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import experiments.Experiment;
import experiments.ExperimentNew;
import java.awt.BorderLayout;
import java.awt.Color;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.DefaultListModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import org.apache.commons.lang.StringUtils;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.StandardBarPainter;
import org.jfree.chart.renderer.xy.StackedXYBarRenderer;
import org.jfree.chart.renderer.xy.StandardXYBarPainter;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.IntervalXYDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeriesCollection;
import tools.CellAnalysator;
import tools.CellDay;
import tools.CellFish;
import tools.CellGroup;
import tools.CellHolder;
import tools.CellImporter;
import tools.CellPositionExporter;
import tools.Histogram;
import tools.MarkerHolder;
import tools.VolumeHistogramGenerator;
import tools.CellExporter;
import tools.CellImporterCSV;

/**
 *
 * @author janlu
 */
public class CellAnalysisGUI extends javax.swing.JDialog {
    private CellAnalysator cellAnalysator;
    private VolumeHistogramGenerator histogramGenerator;
    private ExperimentNew experiment;
    private MainMenuGUI parent;
    private CellHolder cellHolder;
    ChartPanel chartPanel;
    JFreeChart volumePlot;
    private double[] chartData;
    private double[] filteredChartData;
    private boolean filteredDataIsLog = false;
    private IntervalMarker dynamicMarker;
    private ArrayList<MarkerHolder> markerArrayList = new ArrayList();
    

    
    //Add loader, keep all cells in classes
    //Change to unit volume (fix rotation)
    //add logarithmic button for total volume dist
    
    
    /**
     * Creates new form CellAnalysisGUI
     */
    public CellAnalysisGUI(java.awt.Frame parent, boolean modal, ExperimentNew experiment) {
        super(parent, modal);
        this.parent = (MainMenuGUI) parent;
        this.experiment = experiment;
        initComponents();
        //initGraph();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        closeButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        minDisplayVolumeField = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        maxDisplayVolumeField = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        nBinsField = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        minThresholdField = new javax.swing.JFormattedTextField();
        maxThresholdField = new javax.swing.JFormattedTextField();
        logScaleCheckBox = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        volumeHistogramTree = new javax.swing.JTree();
        setTreeSelectionButton = new javax.swing.JButton();
        cumulativeHistogramCheckBox = new javax.swing.JCheckBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        markerJList = new javax.swing.JList<>();
        markerLabelField = new javax.swing.JTextField();
        markerLabelLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        addMarkerButton = new javax.swing.JButton();
        removeMarkerButton = new javax.swing.JButton();
        histogramChartPanel = new javax.swing.JPanel();
        minSliderX = new javax.swing.JSlider();
        maxSliderX = new javax.swing.JSlider();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        cellCountTree = new javax.swing.JTree();
        jScrollPane4 = new javax.swing.JScrollPane();
        markerJListCellCount = new javax.swing.JList<>();
        cellCountChartPanel = new javax.swing.JPanel();
        cellCountDrawGraphButton = new javax.swing.JToggleButton();
        exportCellCountButton = new javax.swing.JButton();
        loadingBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                CellAnalysisGUI.this.windowOpened(evt);
            }
        });

        closeButton.setText("Close");

        saveButton.setText("Save");

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });
        jTabbedPane1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTabbedPane1PropertyChange(evt);
            }
        });

        jPanel1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jPanel1PropertyChange(evt);
            }
        });

        jLabel1.setText("Min display volume:");

        minDisplayVolumeField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        minDisplayVolumeField.setText("1.00");
        minDisplayVolumeField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                minDisplayVolumeFieldFocusLost(evt);
            }
        });
        minDisplayVolumeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minDisplayVolumeFieldActionPerformed(evt);
            }
        });
        minDisplayVolumeField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                minDisplayVolumeFieldPropertyChange(evt);
            }
        });
        minDisplayVolumeField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                minDisplayVolumeFieldKeyPressed(evt);
            }
        });

        jLabel2.setText("Max display volume:");

        maxDisplayVolumeField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        maxDisplayVolumeField.setText("1.00");
        maxDisplayVolumeField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                maxDisplayVolumeFieldFocusLost(evt);
            }
        });
        maxDisplayVolumeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxDisplayVolumeFieldActionPerformed(evt);
            }
        });
        maxDisplayVolumeField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                maxDisplayVolumeFieldPropertyChange(evt);
            }
        });

        jLabel3.setText("Number of bins:");

        nBinsField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        nBinsField.setText("1");
        nBinsField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                nBinsFieldFocusLost(evt);
            }
        });
        nBinsField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nBinsFieldActionPerformed(evt);
            }
        });
        nBinsField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                nBinsFieldPropertyChange(evt);
            }
        });

        jLabel4.setText("Min threshold:");

        jLabel5.setText("Max threshold:");

        minThresholdField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        minThresholdField.setText("0.00");
        minThresholdField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                minThresholdFieldFocusLost(evt);
            }
        });
        minThresholdField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minThresholdFieldActionPerformed(evt);
            }
        });

        maxThresholdField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        maxThresholdField.setText("0.0");
        maxThresholdField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                maxThresholdFieldFocusLost(evt);
            }
        });
        maxThresholdField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxThresholdFieldActionPerformed(evt);
            }
        });

        logScaleCheckBox.setText("Log-scale");
        logScaleCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logScaleCheckBoxActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(volumeHistogramTree);

        setTreeSelectionButton.setText("Set Selection");
        setTreeSelectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setTreeSelectionButtonActionPerformed(evt);
            }
        });

        cumulativeHistogramCheckBox.setText("Cumulative");
        cumulativeHistogramCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cumulativeHistogramCheckBoxActionPerformed(evt);
            }
        });

        markerJList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        markerJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                markerJListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(markerJList);

        markerLabelLabel.setText("Label:");

        jLabel7.setText("Min:");

        jLabel8.setText("Max:");

        jLabel9.setText("minValue");

        jLabel10.setText("maxValue");

        addMarkerButton.setText("Add");
        addMarkerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMarkerButtonActionPerformed(evt);
            }
        });

        removeMarkerButton.setText("Remove");
        removeMarkerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeMarkerButtonActionPerformed(evt);
            }
        });

        histogramChartPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        histogramChartPanel.setLayout(new java.awt.BorderLayout());

        minSliderX.setMaximum(10000);
        minSliderX.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                minSliderXMouseDragged(evt);
            }
        });

        maxSliderX.setMaximum(10000);
        maxSliderX.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                maxSliderXMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(logScaleCheckBox)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(minDisplayVolumeField)
                            .addComponent(maxDisplayVolumeField, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                            .addComponent(nBinsField, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                            .addComponent(minThresholdField)
                            .addComponent(maxThresholdField)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cumulativeHistogramCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(setTreeSelectionButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(markerLabelLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(markerLabelField, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel9))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(addMarkerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10)))))
                    .addComponent(removeMarkerButton))
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(maxSliderX, javax.swing.GroupLayout.DEFAULT_SIZE, 1077, Short.MAX_VALUE)
                    .addComponent(minSliderX, javax.swing.GroupLayout.DEFAULT_SIZE, 1077, Short.MAX_VALUE)
                    .addComponent(histogramChartPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minDisplayVolumeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(maxDisplayVolumeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(nBinsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(minThresholdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(maxThresholdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(logScaleCheckBox)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(markerLabelField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(markerLabelLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel9))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addMarkerButton))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeMarkerButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setTreeSelectionButton)
                    .addComponent(cumulativeHistogramCheckBox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(histogramChartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 649, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(minSliderX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(maxSliderX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Volume histogram", jPanel1);

        jScrollPane2.setViewportView(cellCountTree);

        markerJListCellCount.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(markerJListCellCount);

        cellCountChartPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout cellCountChartPanelLayout = new javax.swing.GroupLayout(cellCountChartPanel);
        cellCountChartPanel.setLayout(cellCountChartPanelLayout);
        cellCountChartPanelLayout.setHorizontalGroup(
            cellCountChartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1298, Short.MAX_VALUE)
        );
        cellCountChartPanelLayout.setVerticalGroup(
            cellCountChartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 669, Short.MAX_VALUE)
        );

        cellCountDrawGraphButton.setText("Draw Graph");
        cellCountDrawGraphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cellCountDrawGraphButtonActionPerformed(evt);
            }
        });

        exportCellCountButton.setText("Export CellCount");
        exportCellCountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportCellCountButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cellCountDrawGraphButton))
                            .addComponent(exportCellCountButton))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addComponent(cellCountChartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cellCountChartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cellCountDrawGraphButton))
                        .addGap(18, 18, 18)
                        .addComponent(exportCellCountButton)))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Cell count", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(loadingBar, javax.swing.GroupLayout.PREFERRED_SIZE, 831, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeButton))
                    .addComponent(jTabbedPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loadingBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(closeButton)
                        .addComponent(saveButton)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void windowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowOpened
        loadCells();
    }//GEN-LAST:event_windowOpened

    private void jTabbedPane1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1PropertyChange

    }//GEN-LAST:event_jTabbedPane1PropertyChange

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged

    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void exportCellCountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportCellCountButtonActionPerformed
        ArrayList<IntervalMarker> markers = new ArrayList();
        for (MarkerHolder holder : markerArrayList) markers.add(holder.getMarker());
        CellExporter exporter = new CellExporter(cellHolder.getGroupList(), experiment);
        exporter.run();
    }//GEN-LAST:event_exportCellCountButtonActionPerformed

    private void cellCountDrawGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cellCountDrawGraphButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cellCountDrawGraphButtonActionPerformed

    private void jPanel1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jPanel1PropertyChange

    }//GEN-LAST:event_jPanel1PropertyChange

    private void maxSliderXMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_maxSliderXMouseDragged
        updateMarker();
    }//GEN-LAST:event_maxSliderXMouseDragged

    private void minSliderXMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minSliderXMouseDragged
        updateMarker();
    }//GEN-LAST:event_minSliderXMouseDragged

    private void removeMarkerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeMarkerButtonActionPerformed
        if (markerJList.getSelectedIndices().length == 0) return;
        int[] selections = markerJList.getSelectedIndices();
        for (int idx : selections) {
            if (idx == 0) continue;
            markerArrayList.remove(idx);
            updateMarkersJList();
        }

    }//GEN-LAST:event_removeMarkerButtonActionPerformed

    private void addMarkerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMarkerButtonActionPerformed
        if (StringUtils.isBlank(markerLabelField.getText())) {
            markerLabelLabel.setForeground(Color.red);
            return;
        }
        if (dynamicMarker == null) return;

        markerLabelLabel.setForeground(Color.black);
        volumePlot.getXYPlot().removeDomainMarker(dynamicMarker);
        IntervalMarker tempMarker = new IntervalMarker(dynamicMarker.getStartValue(), dynamicMarker.getEndValue());
        tempMarker.setLabel(markerLabelField.getText().trim());
        markerArrayList.add(new MarkerHolder(markerLabelField.getText().trim(), tempMarker));
        updateMarkersJList();

    }//GEN-LAST:event_addMarkerButtonActionPerformed

    private void markerJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_markerJListValueChanged
        if (markerJList.getSelectedIndices().length == 0) return;
        int[] selections = markerJList.getSelectedIndices();
        volumePlot.getXYPlot().clearDomainMarkers();
        for (int idx : selections) {
            volumePlot.getXYPlot().addDomainMarker(markerArrayList.get(idx).getMarker());
        }
    }//GEN-LAST:event_markerJListValueChanged

    private void cumulativeHistogramCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cumulativeHistogramCheckBoxActionPerformed

    }//GEN-LAST:event_cumulativeHistogramCheckBoxActionPerformed

    private void setTreeSelectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setTreeSelectionButtonActionPerformed
        setSelection();
    }//GEN-LAST:event_setTreeSelectionButtonActionPerformed

    private void logScaleCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logScaleCheckBoxActionPerformed
        toggleLogScale();
    }//GEN-LAST:event_logScaleCheckBoxActionPerformed

    private void maxThresholdFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxThresholdFieldActionPerformed
        updateCutoff();
    }//GEN-LAST:event_maxThresholdFieldActionPerformed

    private void maxThresholdFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_maxThresholdFieldFocusLost
        updateCutoff();
    }//GEN-LAST:event_maxThresholdFieldFocusLost

    private void minThresholdFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minThresholdFieldActionPerformed
        updateCutoff();
    }//GEN-LAST:event_minThresholdFieldActionPerformed

    private void minThresholdFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_minThresholdFieldFocusLost
        updateCutoff();
    }//GEN-LAST:event_minThresholdFieldFocusLost

    private void nBinsFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_nBinsFieldPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_nBinsFieldPropertyChange

    private void nBinsFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nBinsFieldActionPerformed
        updateNBins();
    }//GEN-LAST:event_nBinsFieldActionPerformed

    private void nBinsFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nBinsFieldFocusLost
        updateNBins();
    }//GEN-LAST:event_nBinsFieldFocusLost

    private void maxDisplayVolumeFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_maxDisplayVolumeFieldPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_maxDisplayVolumeFieldPropertyChange

    private void maxDisplayVolumeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxDisplayVolumeFieldActionPerformed
        updateDisplayRange();
    }//GEN-LAST:event_maxDisplayVolumeFieldActionPerformed

    private void maxDisplayVolumeFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_maxDisplayVolumeFieldFocusLost
        updateDisplayRange();
    }//GEN-LAST:event_maxDisplayVolumeFieldFocusLost

    private void minDisplayVolumeFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minDisplayVolumeFieldKeyPressed
        //if (!evt.) return;
        //System.out.println("Changed to " + minDisplayVolumeField.getText());
    }//GEN-LAST:event_minDisplayVolumeFieldKeyPressed

    private void minDisplayVolumeFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_minDisplayVolumeFieldPropertyChange
        //System.out.println("Changed to " + minDisplayVolumeField.getText());
    }//GEN-LAST:event_minDisplayVolumeFieldPropertyChange

    private void minDisplayVolumeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minDisplayVolumeFieldActionPerformed
        updateDisplayRange();
    }//GEN-LAST:event_minDisplayVolumeFieldActionPerformed

    private void minDisplayVolumeFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_minDisplayVolumeFieldFocusLost
        updateDisplayRange();
    }//GEN-LAST:event_minDisplayVolumeFieldFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CellAnalysisGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CellAnalysisGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CellAnalysisGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CellAnalysisGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CellAnalysisGUI dialog = new CellAnalysisGUI(new javax.swing.JFrame(), true, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addMarkerButton;
    private javax.swing.JPanel cellCountChartPanel;
    private javax.swing.JToggleButton cellCountDrawGraphButton;
    private javax.swing.JTree cellCountTree;
    private javax.swing.JButton closeButton;
    private javax.swing.JCheckBox cumulativeHistogramCheckBox;
    private javax.swing.JButton exportCellCountButton;
    private javax.swing.JPanel histogramChartPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JProgressBar loadingBar;
    private javax.swing.JCheckBox logScaleCheckBox;
    private javax.swing.JList<String> markerJList;
    private javax.swing.JList<String> markerJListCellCount;
    private javax.swing.JTextField markerLabelField;
    private javax.swing.JLabel markerLabelLabel;
    private javax.swing.JFormattedTextField maxDisplayVolumeField;
    private javax.swing.JSlider maxSliderX;
    private javax.swing.JFormattedTextField maxThresholdField;
    private javax.swing.JFormattedTextField minDisplayVolumeField;
    private javax.swing.JSlider minSliderX;
    private javax.swing.JFormattedTextField minThresholdField;
    private javax.swing.JFormattedTextField nBinsField;
    private javax.swing.JButton removeMarkerButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton setTreeSelectionButton;
    private javax.swing.JTree volumeHistogramTree;
    // End of variables declaration//GEN-END:variables

    private void initGraph() {
        volumePlot = ChartFactory.createHistogram("Volume distribution", "Volume (um^3)", "Count", new XYIntervalSeriesCollection());
        ((XYBarRenderer)(volumePlot.getXYPlot().getRenderer())).setBarPainter(new StandardXYBarPainter());
        chartPanel = new ChartPanel(volumePlot);
        histogramChartPanel.add(chartPanel, BorderLayout.CENTER);
        histogramChartPanel.validate();
        
        IntervalMarker tempMarker = new IntervalMarker(0, Double.MAX_VALUE);
        tempMarker.setAlpha(0);
        markerArrayList.add(new MarkerHolder("All Events", tempMarker));
        updateMarkersJList();
        
        ArrayList<Object> tempList = new ArrayList(){{add(cellHolder);}};        
        histogramGenerator = new VolumeHistogramGenerator(tempList, this);
        Thread thread = new Thread(histogramGenerator);
        thread.start();
    }

    private void updateDisplayRange() {
        XYIntervalSeriesCollection dataset = (XYIntervalSeriesCollection)volumePlot.getXYPlot().getDataset();
        final double minValue;
        final double maxValue;
        try {
            minValue = Double.parseDouble(minDisplayVolumeField.getText());
            maxValue = Double.parseDouble(maxDisplayVolumeField.getText());
        }
        catch (NumberFormatException e){
            return;
        }
        if ((double)dataset.getStartX(0, 0) == minValue && (double)dataset.getEndXValue(0, dataset.getItemCount(0)-1) == maxValue) {
            return;
        }
        if (minValue > maxValue) return;
        
        new Thread() {
            public void run(){
                histogramGenerator.setHisogramRange(minValue, maxValue);
                histogramGenerator.run();
            }
        }.start();
    }
    private void updateNBins() {
        XYIntervalSeriesCollection dataset = (XYIntervalSeriesCollection)volumePlot.getXYPlot().getDataset();
        final int nBins;
        try {
            nBins = Integer.parseInt(nBinsField.getText());
        }
        catch (NumberFormatException e){
            return;
        }
        if ((int)dataset.getItemCount(0) == nBins) {
            return;
        }
        if (nBins < 1) return;
        
        new Thread() {
            public void run(){
                histogramGenerator.setNumberOfBins(nBins);
                histogramGenerator.run();
            }
        }.start();
    }
    private void updateCutoff() {
        double minValue;
        double maxValue;
        try {
            minValue = Double.parseDouble(minThresholdField.getText());
            maxValue = Double.parseDouble(maxThresholdField.getText());
        }
        catch (NumberFormatException e){
            return;
        }
        new Thread() {
            public void run(){
                histogramGenerator.setCutoff(minValue, maxValue);
                histogramGenerator.run();
            }
        }.start();
        
    }

    private void toggleLogScale() {
        new Thread() {
            public void run(){
                histogramGenerator.setLog(logScaleCheckBox.isSelected());
                histogramGenerator.run();
            }
        }.start();
        if(logScaleCheckBox.isSelected()) {
            LogAxis logAxis = new LogAxis("Volume (um^3)");
            logAxis.setBase(10);
            logAxis.setAutoRange(true);
            logAxis.setMinorTickCount(9);
            logAxis.setMinorTickMarksVisible(true);
            logAxis.setNumberFormatOverride(new DecimalFormat());
            
            volumePlot.getXYPlot().setDomainAxis(logAxis);
            
        }
        else {
            NumberAxis numberAxis = new NumberAxis("Volume (um^3)");
            numberAxis.setAutoRange(true);
            volumePlot.getXYPlot().setDomainAxis(numberAxis);
        }
    }

    public void setProgress(String currentFile, int completed, int total) {
        loadingBar.setString(currentFile);
        loadingBar.setStringPainted(true);
        loadingBar.setMaximum(total);
        loadingBar.setValue(completed);
    }

    public void setCellHolder(CellHolder cellHolder) {
        this.cellHolder = cellHolder;
        createTreeNodes();
        initGraph();
    }

    private void createTreeNodes() {
        DefaultMutableTreeNode root = new DefaultMutableTreeNode(cellHolder);
        for (CellGroup cellGroup : cellHolder.getGroupList()) {
            DefaultMutableTreeNode groupNode = new DefaultMutableTreeNode(cellGroup);
            for (CellFish cellFish : cellGroup.getFishList()) {
                DefaultMutableTreeNode fishNode = new DefaultMutableTreeNode(cellFish);
                for (CellDay cellDay : cellFish.getDayList()) {
                    DefaultMutableTreeNode cellDayNode = new DefaultMutableTreeNode(cellDay);
                    fishNode.add(cellDayNode);
                }
                groupNode.add(fishNode);
            }
            root.add(groupNode);
        }
        volumeHistogramTree.setModel(new DefaultTreeModel(root));
        cellCountTree.setModel(new DefaultTreeModel(root));
    }

    private void loadCells() {
        System.out.println("Loading cells");
        CellImporterCSV importer = new CellImporterCSV(experiment, this);
        Thread thread = new Thread(importer);
        thread.start();
    }
    
    public void setHistogramDataset(XYIntervalSeriesCollection dataset) {
        volumePlot.getXYPlot().setDataset(dataset);
        
      //  double lowest = Double.MAX_VALUE;
       // double highest = 0;
       // for (int i = 0; i < dataset.getSeriesCount(); i ++) {
       //     if (dataset.getSeries(i).getXLowValue(0) < lowest) lowest = dataset.getSeries(i).getXLowValue(0);
       //     if (dataset.getSeries(i).getXHighValue(dataset.getSeries(i).getItemCount()-1) > highest) highest = dataset.getSeries(i).getXHighValue(dataset.getSeries(i).getItemCount()-1);
       // }
        //System.out.println("Highest " + highest);
       // System.out.println("Lowest " + lowest);
        //if (highest >= Double.MAX_VALUE) highest = 1000000;
        //if (highest < lowest) lowest = highest - 1;
        //volumePlot.getXYPlot().getDomainAxis().setRange(lowest-1, highest +1);
        //nBinsField.setText(Integer.toString((int)dataset.getItemCount(0)));
        //minDisplayVolumeField.setText(Double.toString((double)dataset.getStartX(0, 0)));
        //maxDisplayVolumeField.setText(Double.toString((double)dataset.getEndXValue(0, dataset.getItemCount(0)-1)));
        //minThresholdField.setText(Double.toString((double)dataset.getStartX(0, 0)));
        //maxThresholdField.setText(Double.toString((double)dataset.getEndXValue(0, dataset.getItemCount(0)-1)));
    }

    private void setSelection() {
        ArrayList<Object> selectedObjects = new ArrayList();
        boolean isCumulative = cumulativeHistogramCheckBox.isSelected();
        TreePath[] selectionPath = volumeHistogramTree.getSelectionPaths();
        if (selectionPath == null) {
            selectedObjects.add(cellHolder);
        }
        else {
            for (int i = 0; i < selectionPath.length; i++) {
                selectedObjects.add(((DefaultMutableTreeNode)selectionPath[i].getLastPathComponent()).getUserObject());
            }
        }
        new Thread() {
            public void run(){
                histogramGenerator.setSeries(selectedObjects);
                histogramGenerator.setCumulative(isCumulative);
                histogramGenerator.run();
            }
        }.start();
        
    }

    private void updateMarker() {
        if (volumePlot == null) return;
        if (dynamicMarker != null) volumePlot.getXYPlot().removeDomainMarker(dynamicMarker);
        
        
        double minValue;
        double maxValue;
        if (minSliderX.getValue() < maxSliderX.getValue()) {
            if (logScaleCheckBox.isSelected()) {
                minValue = Math.pow(10, (minSliderX.getValue()/(double)minSliderX.getMaximum()) * Math.log10(volumePlot.getXYPlot().getDomainAxis().getUpperBound()));
                maxValue = Math.pow(10, (maxSliderX.getValue()/(double)maxSliderX.getMaximum()) * Math.log10(volumePlot.getXYPlot().getDomainAxis().getUpperBound()));
            }
            else {
                minValue = (minSliderX.getValue()/(double)minSliderX.getMaximum()) * volumePlot.getXYPlot().getDomainAxis().getUpperBound();
                maxValue = (maxSliderX.getValue()/(double)maxSliderX.getMaximum()) * volumePlot.getXYPlot().getDomainAxis().getUpperBound();
            }
            
        }
        else {
            if (logScaleCheckBox.isSelected()) {
                maxValue = Math.pow(10, (minSliderX.getValue()/(double)minSliderX.getMaximum()) * Math.log10(volumePlot.getXYPlot().getDomainAxis().getUpperBound()));
                minValue = Math.pow(10, (maxSliderX.getValue()/(double)maxSliderX.getMaximum()) * Math.log10(volumePlot.getXYPlot().getDomainAxis().getUpperBound()));
            }
            else {
                minValue = (maxSliderX.getValue()/(double)maxSliderX.getMaximum()) * volumePlot.getXYPlot().getDomainAxis().getUpperBound();
                maxValue = (minSliderX.getValue()/(double)minSliderX.getMaximum()) * volumePlot.getXYPlot().getDomainAxis().getUpperBound();
            }
        }
        System.out.println("minvalue: " + minValue);
        System.out.println("Maxvalue: " + maxValue);
        
        dynamicMarker = new IntervalMarker(minValue, maxValue);
        volumePlot.getXYPlot().addDomainMarker(dynamicMarker);
    }

    private void updateMarkersJList() {
        DefaultListModel listModel = new DefaultListModel();
        for (MarkerHolder holder : markerArrayList) {
            listModel.addElement(holder);
        }
        markerJList.setModel(listModel);
        markerJListCellCount.setModel(listModel);
    }

    public void setCellCountDataset(XYIntervalSeriesCollection dataset) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }


}
