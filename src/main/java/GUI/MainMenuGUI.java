
package GUI;

import Containers.Experiment.Experiment;
import Containers.Experiment.ExperimentGroup;
import Containers.Experiment.Subject;
import Containers.Experiment.ImageAnalysis;
import Containers.Experiment.Measurement;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import tools.AutomaticCellFinder;
import tools.ContrastAdjuster;
import tools.Cropper;
import importexport.ExperimentExporterXML;
import importexport.ExperimentImporter;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.filechooser.FileNameExtensionFilter;
import tools.CellExporter;
import tools.CellImporterCSV;
import tools.MontageCreator;
import tools.Flattener;

/**
 *
 * @author janlu
 */
public class MainMenuGUI extends javax.swing.JFrame {
    private Experiment experiment;
    private Flattener flattener;
    private Thread workThread;
            
    /**
     * Creates new form CellFinderGUI
     */
    public MainMenuGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        experimentInformationPanel = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        groupCountLabel = new javax.swing.JLabel();
        subjectCountLabel = new javax.swing.JLabel();
        confocalCountLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JLabel();
        groupCountField = new javax.swing.JLabel();
        fishCountField = new javax.swing.JLabel();
        confocalCountField = new javax.swing.JLabel();
        actionPanel = new javax.swing.JPanel();
        flattenImagesButton = new javax.swing.JButton();
        traceFishButton = new javax.swing.JButton();
        adjustContrastButton = new javax.swing.JButton();
        makeMontageButton = new javax.swing.JButton();
        SegmentCellsButton = new javax.swing.JButton();
        exportObjectsButton = new javax.swing.JButton();
        openExperimentButton = new javax.swing.JButton();
        newExperimentButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        experimentTree = new javax.swing.JTree();
        progressBar = new javax.swing.JProgressBar();
        taskLable = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        workingOnFileNumber = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        totalFileNumber = new javax.swing.JLabel();
        fileNameField = new javax.swing.JLabel();
        taskField = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        abortButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        lastSaveField = new javax.swing.JLabel();
        fileProgressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        experimentInformationPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        nameLabel.setText("Experiment name:");

        groupCountLabel.setText("Groups:");

        subjectCountLabel.setText("Subjects:");

        confocalCountLabel.setText("Images:");

        nameField.setText("None");

        groupCountField.setText("0");

        fishCountField.setText("0");

        confocalCountField.setText("0");

        javax.swing.GroupLayout experimentInformationPanelLayout = new javax.swing.GroupLayout(experimentInformationPanel);
        experimentInformationPanel.setLayout(experimentInformationPanelLayout);
        experimentInformationPanelLayout.setHorizontalGroup(
            experimentInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(experimentInformationPanelLayout.createSequentialGroup()
                .addGroup(experimentInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, experimentInformationPanelLayout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(subjectCountLabel))
                    .addGroup(experimentInformationPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(experimentInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(experimentInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(nameLabel)
                                .addComponent(confocalCountLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(groupCountLabel, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(experimentInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(confocalCountField)
                    .addGroup(experimentInformationPanelLayout.createSequentialGroup()
                        .addGroup(experimentInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fishCountField)
                            .addComponent(groupCountField))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        experimentInformationPanelLayout.setVerticalGroup(
            experimentInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(experimentInformationPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(experimentInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(nameField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(experimentInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(groupCountLabel)
                    .addComponent(groupCountField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(experimentInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(subjectCountLabel)
                    .addComponent(fishCountField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(experimentInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confocalCountLabel)
                    .addComponent(confocalCountField))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        actionPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        flattenImagesButton.setText("Flatten images");
        flattenImagesButton.setEnabled(false);
        flattenImagesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flattenImagesButtonActionPerformed(evt);
            }
        });

        traceFishButton.setText("Trace fish");
        traceFishButton.setEnabled(false);
        traceFishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                traceFishButtonActionPerformed(evt);
            }
        });

        adjustContrastButton.setText("Adjust contrast");
        adjustContrastButton.setEnabled(false);
        adjustContrastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adjustContrastButtonActionPerformed(evt);
            }
        });

        makeMontageButton.setText("Make montage");
        makeMontageButton.setEnabled(false);
        makeMontageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeMontageButtonActionPerformed(evt);
            }
        });

        SegmentCellsButton.setText("Cell segmentation");
        SegmentCellsButton.setEnabled(false);
        SegmentCellsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SegmentCellsButtonActionPerformed(evt);
            }
        });

        exportObjectsButton.setText("Export objects");
        exportObjectsButton.setEnabled(false);
        exportObjectsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportObjectsButtonActionPerformed(evt);
            }
        });

        openExperimentButton.setText("Open Experiment");
        openExperimentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openExperimentButtonActionPerformed(evt);
            }
        });

        newExperimentButton.setText("New Experiment");
        newExperimentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newExperimentButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout actionPanelLayout = new javax.swing.GroupLayout(actionPanel);
        actionPanel.setLayout(actionPanelLayout);
        actionPanelLayout.setHorizontalGroup(
            actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(actionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(actionPanelLayout.createSequentialGroup()
                        .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(adjustContrastButton, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                            .addComponent(flattenImagesButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(traceFishButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(openExperimentButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(newExperimentButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(actionPanelLayout.createSequentialGroup()
                        .addComponent(SegmentCellsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, actionPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(exportObjectsButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(makeMontageButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        actionPanelLayout.setVerticalGroup(
            actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(actionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(makeMontageButton)
                    .addComponent(newExperimentButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SegmentCellsButton)
                    .addComponent(openExperimentButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportObjectsButton)
                    .addComponent(flattenImagesButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(traceFishButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(adjustContrastButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        experimentTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        experimentTree.setRootVisible(false);
        experimentTree.setShowsRootHandles(true);
        experimentTree.setVisibleRowCount(40);
        jScrollPane1.setViewportView(experimentTree);

        taskLable.setText("Task:");

        jLabel1.setText("File name:");

        jLabel2.setText("File");

        workingOnFileNumber.setText("0");

        jLabel4.setText("of");

        totalFileNumber.setText("0");

        fileNameField.setText("None");

        taskField.setText("None");

        saveButton.setText("Save");
        saveButton.setEnabled(false);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        abortButton.setText("Abort");
        abortButton.setEnabled(false);
        abortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abortButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Last save:");

        lastSaveField.setText("Never");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(taskLable)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(taskField))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(workingOnFileNumber)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalFileNumber))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fileNameField))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(actionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(experimentInformationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lastSaveField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 216, Short.MAX_VALUE)
                        .addComponent(abortButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fileProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(experimentInformationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(actionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(saveButton)
                            .addComponent(abortButton)
                            .addComponent(lastSaveField)
                            .addComponent(jLabel3)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(taskLable)
                            .addComponent(taskField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(fileNameField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(workingOnFileNumber)
                            .addComponent(jLabel4)
                            .addComponent(totalFileNumber))))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newExperimentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newExperimentButtonActionPerformed
        NewExperimentGUI newExperiment = new NewExperimentGUI(this, true);
        newExperiment.setLocationRelativeTo(this);
        newExperiment.setVisible(true);
        Experiment tempExperiment = newExperiment.getExperiment();
        if (tempExperiment == null ) return;
        this.experiment = tempExperiment;
        updateExperiment();
        flattenImagesButton.setEnabled(true);
        adjustContrastButton.setEnabled(true);
        traceFishButton.setEnabled(true);
        //countCellsButton.setEnabled(true);
        saveButton.setEnabled(true);
        //analyzeCellsButton.setEnabled(true);
        makeMontageButton.setEnabled(true);
        SegmentCellsButton.setEnabled(true);
        exportObjectsButton.setEnabled(true);
    }//GEN-LAST:event_newExperimentButtonActionPerformed

    private void openExperimentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openExperimentButtonActionPerformed
        final JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("XML experiment file", "xml");
        fileChooser.addChoosableFileFilter(filter);
        fileChooser.setAcceptAllFileFilterUsed(false);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {


            ExperimentImporter importer = new ExperimentImporter(fileChooser.getSelectedFile());
            experiment = importer.importExperiment();
            updateExperiment();
            flattenImagesButton.setEnabled(true);
            adjustContrastButton.setEnabled(true);
            traceFishButton.setEnabled(true);
            //countCellsButton.setEnabled(true);
            saveButton.setEnabled(true);
            //analyzeCellsButton.setEnabled(true);
            makeMontageButton.setEnabled(true);
            SegmentCellsButton.setEnabled(true);
            exportObjectsButton.setEnabled(true);
        }
    }//GEN-LAST:event_openExperimentButtonActionPerformed

    private void flattenImagesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flattenImagesButtonActionPerformed
        FlattenerGUI flattenerGUI = new FlattenerGUI(this, true);
        flattenerGUI.setLocationRelativeTo(this);
        flattenerGUI.setVisible(true);
        int tileSize = flattenerGUI.getTileSize();
        int projectionMethod = flattenerGUI.getProjectionMethod();
        if(flattenerGUI.wasAborted()) return;
        flattener = new Flattener(experiment, this, tileSize, projectionMethod);
        workThread = new Thread(flattener);
        workThread.start();
    }//GEN-LAST:event_flattenImagesButtonActionPerformed

    private void abortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abortButtonActionPerformed
        taskField.setText("Interrupting, wait for current file to finish");
        workThread.interrupt();
    }//GEN-LAST:event_abortButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed

        saveExperiment();
        
    }//GEN-LAST:event_saveButtonActionPerformed

    private void adjustContrastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adjustContrastButtonActionPerformed
        ContrastImageSelectorGUI contrastGUI = new ContrastImageSelectorGUI(this, true, experiment);
        contrastGUI.setLocationRelativeTo(this);
        contrastGUI.setVisible(true);
        ImageAnalysis controllAnalysis = contrastGUI.getAnalysis();
        if (controllAnalysis == null ) return;
        ContrastAdjuster contrastAdjust = new ContrastAdjuster(experiment, controllAnalysis);
        workThread = new Thread(contrastAdjust);
        workThread.start();
    }//GEN-LAST:event_adjustContrastButtonActionPerformed

    private void traceFishButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_traceFishButtonActionPerformed
        Cropper cropper = new Cropper(experiment, this);
        workThread = new Thread(cropper);
        workThread.start();
    }//GEN-LAST:event_traceFishButtonActionPerformed

    private void makeMontageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeMontageButtonActionPerformed
        MontageCreator montageCreator = new MontageCreator(experiment, this);
        workThread = new Thread(montageCreator);
        workThread.start();
    }//GEN-LAST:event_makeMontageButtonActionPerformed

    private void SegmentCellsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SegmentCellsButtonActionPerformed
        AutomaticCellFinder cellFinder = new AutomaticCellFinder(experiment, this);
        workThread = new Thread(cellFinder);
        workThread.start();
    }//GEN-LAST:event_SegmentCellsButtonActionPerformed

    private void exportObjectsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportObjectsButtonActionPerformed
        CellImporterCSV importer = new CellImporterCSV(experiment);
        CellExporter exporter = new CellExporter(importer.getCellHolder().getGroupList(), experiment);
        exporter.run();
    }//GEN-LAST:event_exportObjectsButtonActionPerformed

    private void refreshExperimentTree() {
        
        if (experiment == null) {
            DefaultMutableTreeNode root = new DefaultMutableTreeNode("No experiment selected");
            experimentTree.setModel(new DefaultTreeModel(root));
            return;
        }
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Experiment: " + experiment.getName());
        
        ArrayList<ExperimentGroup> groupList = experiment.getGroups();
        for (ExperimentGroup group : groupList) {
            DefaultMutableTreeNode groupNode = new DefaultMutableTreeNode("Group: " + group.getGroupName());
            ArrayList<Subject> subjectList = group.getSubjectList();
            for (Subject subject : subjectList) {
                DefaultMutableTreeNode subjectNode = new DefaultMutableTreeNode("Subject: " + subject.getName());
                ArrayList<Measurement> measurementList = subject.getMeasurements();
                for (Measurement measurement : measurementList) {
                    DefaultMutableTreeNode measurementNode = new DefaultMutableTreeNode("Measurement: " + measurement.getFileName());
                    ArrayList<ImageAnalysis> analysisList = measurement.getAnalysisList();
                    for (ImageAnalysis analysis : analysisList) {
                        DefaultMutableTreeNode analysisNode = new DefaultMutableTreeNode("Analysis: " + analysis.getAnalysisName());
                        measurementNode.add(analysisNode);
                    }
                    subjectNode.add(measurementNode);
                }
                groupNode.add(subjectNode);
            }
            root.add(groupNode);
        } 
        
        experimentTree.setModel(new DefaultTreeModel(root));
    }
    
    public void setProgress(String fileName, int workingOn, int total) {
        workingOnFileNumber.setText(workingOn + "");
        totalFileNumber.setText(total + "");
        fileNameField.setText(fileName);
        progressBar.setMaximum(total);
        progressBar.setValue(workingOn);
    }
    public void setFileProgress(int progress, int total) {
        setFileProgress(null, progress, total);
    }
    public void setFileProgress(String task, int progress, int total) {
        fileProgressBar.setMaximum(total);
        fileProgressBar.setValue(progress);
        fileProgressBar.setString(task);
        fileProgressBar.setStringPainted(true);
    }
    public void setTask(String task, int taskID) {

        taskField.setText(task);
 
        newExperimentButton.setEnabled(false);
        openExperimentButton.setEnabled(false);
        flattenImagesButton.setEnabled(false);
        adjustContrastButton.setEnabled(false);
        traceFishButton.setEnabled(false);
        //analyzeCellsButton.setEnabled(false);
        //countCellsButton.setEnabled(false);
        abortButton.setEnabled(true);
        saveButton.setEnabled(false);
        //refreshButton.setEnabled(false);
        makeMontageButton.setEnabled(false);
        SegmentCellsButton.setEnabled(false);
        exportObjectsButton.setEnabled(false);
    }
    public void finishTask(String taskCompleted) {
        taskField.setText("None - " + taskCompleted + " finished");
        fileNameField.setText("None");
        totalFileNumber.setText(0 + "");
        workingOnFileNumber.setText(0 + "");
        progressBar.setValue(0);
        newExperimentButton.setEnabled(true);
        openExperimentButton.setEnabled(true);
        flattenImagesButton.setEnabled(true);
        adjustContrastButton.setEnabled(true);
        //analyzeCellsButton.setEnabled(true);
        traceFishButton.setEnabled(true);
        //countCellsButton.setEnabled(true);
        abortButton.setEnabled(false);
        saveButton.setEnabled(true);
        //refreshButton.setEnabled(true);
        makeMontageButton.setEnabled(true);
        SegmentCellsButton.setEnabled(true);
        exportObjectsButton.setEnabled(true);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainMenuGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainMenuGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainMenuGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMenuGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainMenuGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SegmentCellsButton;
    private javax.swing.JButton abortButton;
    private javax.swing.JPanel actionPanel;
    private javax.swing.JButton adjustContrastButton;
    private javax.swing.JLabel confocalCountField;
    private javax.swing.JLabel confocalCountLabel;
    private javax.swing.JPanel experimentInformationPanel;
    private javax.swing.JTree experimentTree;
    private javax.swing.JButton exportObjectsButton;
    private javax.swing.JLabel fileNameField;
    private javax.swing.JProgressBar fileProgressBar;
    private javax.swing.JLabel fishCountField;
    private javax.swing.JButton flattenImagesButton;
    private javax.swing.JLabel groupCountField;
    private javax.swing.JLabel groupCountLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lastSaveField;
    private javax.swing.JButton makeMontageButton;
    private javax.swing.JLabel nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JButton newExperimentButton;
    private javax.swing.JButton openExperimentButton;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel subjectCountLabel;
    private javax.swing.JLabel taskField;
    private javax.swing.JLabel taskLable;
    private javax.swing.JLabel totalFileNumber;
    private javax.swing.JButton traceFishButton;
    private javax.swing.JLabel workingOnFileNumber;
    // End of variables declaration//GEN-END:variables

    private void updateExperiment() {
        if (experiment == null) return;
        nameField.setText(experiment.getName());
        groupCountField.setText(String.valueOf(experiment.getGroupCount()));
        fishCountField.setText(String.valueOf(experiment.getFishCount()));
        confocalCountField.setText(String.valueOf(experiment.getImageCount()));        
        refreshExperimentTree();
    }

    public void saveExperiment() {
        if (experiment == null) return;
        ExperimentExporterXML.exportExperiment(experiment);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
       LocalDateTime time = LocalDateTime.now(); 
        lastSaveField.setText(formatter.format(time));
        updateExperiment();
    }
}
